// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaceMyBetProject.Models;

namespace PlaceMyBetProject.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    partial class PlaceMyBetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PlaceMyBetProject.Models.Apuesta", b =>
                {
                    b.Property<int>("apuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("cuota")
                        .HasColumnType("double");

                    b.Property<double>("dineroApuesta")
                        .HasColumnType("double");

                    b.Property<int>("eventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("mercadoId")
                        .HasColumnType("int");

                    b.Property<string>("tipoApuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("tipoMercado")
                        .HasColumnType("double");

                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("apuestaId");

                    b.HasIndex("eventoId");

                    b.HasIndex("mercadoId");

                    b.HasIndex("usuarioId");

                    b.ToTable("Apuesta");

                    b.HasData(
                        new
                        {
                            apuestaId = 12,
                            cuota = 1.8999999999999999,
                            dineroApuesta = 20.0,
                            eventoId = 1,
                            fecha = new DateTime(2020, 12, 11, 13, 22, 41, 994, DateTimeKind.Local).AddTicks(4771),
                            mercadoId = 100,
                            tipoApuesta = "over",
                            tipoMercado = 1.5,
                            usuarioId = "adriperez@gmail.com"
                        });
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Cuenta", b =>
                {
                    b.Property<string>("cuentaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("nombreBanco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("saldo")
                        .HasColumnType("double");

                    b.HasKey("cuentaId");

                    b.ToTable("Cuenta");

                    b.HasData(
                        new
                        {
                            cuentaId = "123456789",
                            nombreBanco = "Bankia",
                            saldo = 645.25
                        });
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Evento", b =>
                {
                    b.Property<int>("eventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("local")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("visitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("eventoId");

                    b.ToTable("Evento");

                    b.HasData(
                        new
                        {
                            eventoId = 1,
                            fecha = new DateTime(2020, 12, 11, 13, 22, 41, 962, DateTimeKind.Local).AddTicks(4938),
                            local = "Valencia",
                            visitante = "Levante"
                        });
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Mercado", b =>
                {
                    b.Property<int>("mercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("apuestaId")
                        .HasColumnType("int");

                    b.Property<double>("cuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("cuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("dineroOver")
                        .HasColumnType("double");

                    b.Property<double>("dineroUnder")
                        .HasColumnType("double");

                    b.Property<int>("eventoId")
                        .HasColumnType("int");

                    b.Property<double>("overUnder")
                        .HasColumnType("double");

                    b.HasKey("mercadoId");

                    b.HasIndex("eventoId");

                    b.ToTable("Mercado");

                    b.HasData(
                        new
                        {
                            mercadoId = 100,
                            apuestaId = 0,
                            cuotaOver = 50.0,
                            cuotaUnder = 50.0,
                            dineroOver = 1.8999999999999999,
                            dineroUnder = 1.8999999999999999,
                            eventoId = 1,
                            overUnder = 1.5
                        });
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Usuario", b =>
                {
                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cuentaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("edad")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("usuarioId");

                    b.HasIndex("cuentaId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            usuarioId = "adriperez@gmail.com",
                            apellido = "Perez",
                            edad = 24,
                            nombre = "Adri"
                        });
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Apuesta", b =>
                {
                    b.HasOne("PlaceMyBetProject.Models.Evento", "evento")
                        .WithMany()
                        .HasForeignKey("eventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBetProject.Models.Mercado", "mercado")
                        .WithMany("apuestas")
                        .HasForeignKey("mercadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBetProject.Models.Usuario", "usuario")
                        .WithMany("apuestas")
                        .HasForeignKey("usuarioId");
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Mercado", b =>
                {
                    b.HasOne("PlaceMyBetProject.Models.Evento", "evento")
                        .WithMany("mercados")
                        .HasForeignKey("eventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaceMyBetProject.Models.Usuario", b =>
                {
                    b.HasOne("PlaceMyBetProject.Models.Cuenta", "cuenta")
                        .WithMany()
                        .HasForeignKey("cuentaId");
                });
#pragma warning restore 612, 618
        }
    }
}
